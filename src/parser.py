import math

from rpython.rlib.rstruct.runpack import runpack
from rpython.rlib.rarithmetic import intmask

from instruction import *
from constant import *
from dump import dump_constant, dump_inst
from interpreter import BytecodeInterpreter


def bytes_to_int(bytes):
  result = 0
  for b in bytes:
    result = result * 256 + int(b)
  return result


class BytecodeParser:
  def __init__(self, code):
    self.code = str(code)
    self.pos = 0

  def consume_raw(self, offset=1):
    consumed = self.code[self.pos:self.pos+offset]
    self.pos += offset
    return consumed

  def consume_ubyte(self):
    return runpack(">B", self.consume_raw(1))

  def consume_ushort(self):
    return runpack(">H", self.consume_raw(2))

  def consume_int(self):
    return runpack(">i", self.consume_raw(4))

  def consume_uint(self):
    return runpack(">I", self.consume_raw(4))

  def consume_longlong(self):
    return runpack(">q", self.consume_raw(8))

  def consume_ulonglong(self):
    return runpack(">Q", self.consume_raw(8))

  def parse_integer(self):
    is_bigint = self.consume_ubyte()
    # if is_bigint == 0:
    if True:
      data = self.consume_int()
      return ConstInteger(data)
    """
    else:
      sign = self.consume_byte()
      bytes_count = self.consume_ulonglong()
      data = self.consume_raw(bytes_count)
      value = bytes_to_int(list(reversed(data)))
      return value if sign == 1 else -value
    """

  def parse_double(self):
    base = self.parse_integer().intval
    exp = self.consume_longlong()
    return ConstDouble(math.pow(base * 2, exp))

  def parse_char(self):
    head = self.consume_ubyte()
    head_chr = chr(head)
    result = ''

    if head < 0x80:
      result = str(head_chr).decode('utf-8')
    elif head < 0xe0:
      result = (head_chr + self.consume_raw(1)).decode('utf-8')
    elif head < 0xf0:
      result = (head_chr + self.consume_raw(2)).decode('utf-8')
    else:
      result = (head_chr + self.consume_raw(3)).decode('utf-8')

    return ConstChar(result)

  def parse_string(self):
    count = self.consume_ulonglong()

    result = u''
    for i in range(0, count):
      result += self.parse_char().charval

    return result

  def parse_boolean(self):
    value = self.consume_ubyte()
    return ConstBoolean(value == 1)

  def parse_instruction(self):
    line_number = self.consume_uint()
    opcode = self.consume_ubyte()

    if opcode in [INST_PUSH, INST_STORE, INST_LOAD, INST_CALL, INST_JMP_FORWARD, INST_POP_JMP_IF_FALSE]:
      return Instruction(line_number, opcode, self.consume_int())
    else:
      return Instruction(line_number, opcode)

  def parse_constant_list(self):
    count = self.consume_ulonglong()

    result = []
    for i in range(count):
      const_type = self.consume_ubyte()

      if const_type == 0:
        result.append(self.parse_integer())
      elif const_type == 1:
        result.append(self.parse_double())
      elif const_type == 2:
        result.append(self.parse_char())
      elif const_type == 3:
        result.append(self.parse_boolean())
      elif const_type == 4:
        result.append(self.parse_funcobject())

    return result

  def parse_instruction_list(self):
    count = self.consume_ulonglong()

    result = []
    for i in range(0, count):
      result.append(self.parse_instruction())

    return result

  def parse_string_list(self):
    count = self.consume_ulonglong()

    result = []
    for i in range(0, count):
      result.append(self.parse_string())

    return result

  def parse_funcobject(self):
    arity = self.consume_ushort()
    insts = self.parse_instruction_list()
    const_table = self.parse_constant_list()
    var_names = self.parse_string_list()

    return ConstFunc(FuncObject(arity, insts, const_table, var_names))

  def parse_buildinternal(self):
    const_table = self.parse_constant_list()
    print "YEP ITS OVER_-----------------"
    var_names = self.parse_string_list()

    return (const_table, var_names)

  def parse_code(self):
    (const_table, var_names) = self.parse_buildinternal()
    code = self.parse_instruction_list()

    return (const_table, var_names, code)


"""
parser = BytecodeParser(
    b'\x00\x00\x00\x00\x00\x00\x00\x04\x04\x00\x02\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x02\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x0d\x00\x00\x00\x02\x06\x00\x00\x00\x03\x00\x00\x00\x03\x03\x00\x00\x00\x00\x00\x00\x00\x03\x07\x00\x00\x00\x03\x05\x00\x00\x00\x10\x00\x00\x00\x04\x03\x00\x00\x00\x00\x00\x00\x00\x04\x03\x00\x00\x00\x01\x00\x00\x00\x04\x0c\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x04\x0d\x00\x00\x00\x04\x06\x00\x00\x00\x03\x00\x00\x00\x05\x03\x00\x00\x00\x01\x00\x00\x00\x05\x07\x00\x00\x00\x05\x05\x00\x00\x00\x07\x00\x00\x00\x07\x03\x00\x00\x00\x02\x00\x00\x00\x07\x03\x00\x00\x00\x01\x00\x00\x00\x07\x03\x00\x00\x00\x00\x00\x00\x00\x07\x03\x00\x00\x00\x01\x00\x00\x00\x07\x0c\x00\x00\x00\x07\x04\x00\x00\x00\x02\x00\x00\x00\x07\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\xea\xb0\x92\x31\x00\x00\x00\x00\x00\x00\x00\x02\xea\xb0\x92\x32\x00\x00\x00\x00\x00\x00\x00\x09\xec\xb5\x9c\xeb\x8c\x80\xea\xb3\xb5\xec\x95\xbd\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x0a\x03\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x0d\x00\x00\x00\x0a\x06\x00\x00\x00\x03\x00\x00\x00\x0b\x00\x00\x00\x00\x01\x00\x00\x00\x0b\x07\x00\x00\x00\x0b\x05\x00\x00\x00\x13\x00\x00\x00\x0c\x03\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x0d\x00\x00\x00\x0c\x06\x00\x00\x00\x03\x00\x00\x00\x0d\x00\x00\x00\x00\x01\x00\x00\x00\x0d\x07\x00\x00\x00\x0d\x05\x00\x00\x00\x0c\x00\x00\x00\x0f\x03\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x09\x00\x00\x00\x0f\x04\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x02\x00\x00\x00\x0f\x09\x00\x00\x00\x0f\x04\x00\x00\x00\x01\x00\x00\x00\x0f\x08\x00\x00\x00\x0f\x07\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\xec\x88\x98\x00\x00\x00\x00\x00\x00\x00\x0a\xed\x94\xbc\xeb\xb3\xb4\xeb\x82\x98\xec\xb9\x98\x20\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x12\x03\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x12\x0e\x00\x00\x00\x12\x06\x00\x00\x00\x03\x00\x00\x00\x13\x00\x00\x00\x00\x01\x00\x00\x00\x13\x07\x00\x00\x00\x13\x05\x00\x00\x00\x0d\x00\x00\x00\x14\x03\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x14\x0d\x00\x00\x00\x14\x06\x00\x00\x00\x03\x00\x00\x00\x15\x00\x00\x00\x00\x02\x00\x00\x00\x15\x07\x00\x00\x00\x15\x05\x00\x00\x00\x06\x00\x00\x00\x16\x03\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x16\x0f\x00\x00\x00\x16\x06\x00\x00\x00\x02\x00\x00\x00\x17\x00\x00\x00\x00\x03\x00\x00\x00\x17\x07\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x02\xec\x9d\x8c\x02\xec\x98\x81\x02\xec\x96\x91\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\xec\x88\x98\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x09\xec\xb5\x9c\xeb\x8c\x80\xea\xb3\xb5\xec\x95\xbd\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x0a\xed\x94\xbc\xeb\xb3\xb4\xeb\x82\x98\xec\xb9\x98\x20\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x08\xeb\xb6\x80\xed\x98\xb8\xeb\xa5\xbc\x20\xed\x8c\x90\xec\xa0\x95\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x01\x00\x00\x00\x09\x02\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x00\x02\x00\x00\x00\x11\x02\x00\x00\x00\x02\x00\x00\x00\x19\x03\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x00\x03\x00\x00\x00\x19\x04\x00\x00\x00\x01\x00\x00\x00\x19\x01'
)
(const_table, var_names, code) = parser.parse_code()

print "\n# Bytecode parsing result: "
print "[const table]"
for constant in const_table:
  dump_constant(constant)
print "[var names]"
for name in var_names:
  print name + "."
print "[code]"
for inst in code:
  dump_inst(inst)

interpreter = BytecodeInterpreter(const_table, var_names, code)
interpreter.run()
"""
