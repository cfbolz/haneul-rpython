from rpython.rlib.rstruct.runpack import runpack

from instruction import *
from constant import FuncObject
from dump import dump_constant


def signed_bytes_to_int(data):
  encoded = str(data).encode('hex')
  return int(encoded, 16)


class BytecodeParser:
  def __init__(self, code):
    self.code = code
    self.pos = 0

  def consume_raw(self, offset=1):
    consumed = b''
    consumed_str = ''

    for i in range(0, offset):
      consumed += self.code[self.pos]
      consumed_str += str(ord(self.code[self.pos])) + ' '
      self.pos += 1

    print "Consumed : " + consumed_str
    return consumed

  def consume(self, fmt, offset=1):
    return runpack(">" + fmt, self.consume_raw(offset))

  def parse_integer(self):
    is_bigint = self.consume('B')
    if is_bigint == 0:
      data = self.consume('i', 4)
      return data
    else:
      sign = self.consume('B')
      bytes_count = self.consume('Q', 8)
      data = self.consume_raw(bytes_count)
      value = signed_bytes_to_int(data[::-1])
      return value if sign == 1 else -value

  def parse_double(self):
    base = self.parse_integer()
    exp = self.consume('q', 8)
    return base * 2 ** exp

  def parse_char(self):
    head = self.consume('B')
    head_chr = chr(head)

    if head < 0x80:
      return head_chr
    elif head < 0xe0:
      return (head_chr + self.consume_raw(1)).decode('utf-8')
    elif head < 0xf0:
      return (head_chr + self.consume_raw(2)).decode('utf-8')
    else:
      return (head_chr + self.consume_raw(3)).decode('utf-8')

  def parse_string(self):
    count = self.consume('Q', 8)
    print "string!!! :: " + str(count)

    result = ''
    for i in range(0, count):
      result += self.parse_char()

    print "it was !!! ::: " + result
    return result

  def parse_boolean(self):
    value = self.consume('B')
    return value == 1

  def parse_list(self, f):
    count = self.consume('Q', 8)
    print "list!!! :: " + str(count)

    result = []
    for i in range(0, count):
      result.append(f())

    return result

  def parse_instruction(self):
    line_number = self.consume('I', 4)
    opcode = self.consume('B')

    if opcode in [INST_PUSH, INST_STORE, INST_LOAD, INST_CALL, INST_JMP_FORWARD, INST_POP_JMP_IF_FALSE]:
      return Instruction(line_number, opcode, self.consume('i', 4))
    else:
      return Instruction(line_number, opcode)

  def parse_constant(self):
    const_type = self.consume('B')

    if const_type == 0:
      return self.parse_integer()
    elif const_type == 1:
      return self.parse_double()
    elif const_type == 2:
      return self.parse_char()
    elif const_type == 3:
      return self.parse_boolean()
    elif const_type == 4:
      return self.parse_funcobject()

  def parse_funcobject(self):
    arity = self.consume('H', 2)
    insts = self.parse_list(self.parse_instruction)
    const_table = self.parse_list(self.parse_constant)
    var_names = self.parse_list(self.parse_string)

    return FuncObject(arity, insts, const_table, var_names)

  def parse_buildinternal(self):
    const_table = self.parse_list(self.parse_constant)
    print "YEP ITS OVER_-----------------"
    var_names = self.parse_list(self.parse_string)

    return (const_table, var_names)

  def parse_code(self):
    internal = self.parse_buildinternal()
    insts = self.parse_list(self.parse_instruction)

    return (internal, insts)


parser = BytecodeParser(
    b'\x00\x00\x00\x00\x00\x00\x00\x04\x04\x00\x02\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x02\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x0d\x00\x00\x00\x02\x06\x00\x00\x00\x0b\x00\x00\x00\x03\x03\x00\x00\x00\x00\x00\x00\x00\x03\x07\x00\x00\x00\x03\x05\x00\x00\x00\x3c\x00\x00\x00\x04\x03\x00\x00\x00\x00\x00\x00\x00\x04\x03\x00\x00\x00\x01\x00\x00\x00\x04\x0c\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x04\x0d\x00\x00\x00\x04\x06\x00\x00\x00\x0b\x00\x00\x00\x05\x03\x00\x00\x00\x01\x00\x00\x00\x05\x07\x00\x00\x00\x05\x05\x00\x00\x00\x1b\x00\x00\x00\x07\x03\x00\x00\x00\x02\x00\x00\x00\x07\x03\x00\x00\x00\x01\x00\x00\x00\x07\x03\x00\x00\x00\x00\x00\x00\x00\x07\x03\x00\x00\x00\x01\x00\x00\x00\x07\x0c\x00\x00\x00\x07\x04\x00\x00\x00\x02\x00\x00\x00\x07\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\xea\xb0\x92\x31\x00\x00\x00\x00\x00\x00\x00\x02\xea\xb0\x92\x32\x00\x00\x00\x00\x00\x00\x00\x09\xec\xb5\x9c\xeb\x8c\x80\xea\xb3\xb5\xec\x95\xbd\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x0a\x03\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x0d\x00\x00\x00\x0a\x06\x00\x00\x00\x0b\x00\x00\x00\x0b\x00\x00\x00\x00\x01\x00\x00\x00\x0b\x07\x00\x00\x00\x0b\x05\x00\x00\x00\x47\x00\x00\x00\x0c\x03\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x0d\x00\x00\x00\x0c\x06\x00\x00\x00\x0b\x00\x00\x00\x0d\x00\x00\x00\x00\x01\x00\x00\x00\x0d\x07\x00\x00\x00\x0d\x05\x00\x00\x00\x2c\x00\x00\x00\x0f\x03\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x09\x00\x00\x00\x0f\x04\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x01\x00\x00\x00\x0f\x03\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x02\x00\x00\x00\x0f\x09\x00\x00\x00\x0f\x04\x00\x00\x00\x01\x00\x00\x00\x0f\x08\x00\x00\x00\x0f\x07\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\xec\x88\x98\x00\x00\x00\x00\x00\x00\x00\x0a\xed\x94\xbc\xeb\xb3\xb4\xeb\x82\x98\xec\xb9\x98\x20\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x12\x03\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x12\x0e\x00\x00\x00\x12\x06\x00\x00\x00\x0b\x00\x00\x00\x13\x00\x00\x00\x00\x01\x00\x00\x00\x13\x07\x00\x00\x00\x13\x05\x00\x00\x00\x31\x00\x00\x00\x14\x03\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x14\x0d\x00\x00\x00\x14\x06\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00\x00\x02\x00\x00\x00\x15\x07\x00\x00\x00\x15\x05\x00\x00\x00\x16\x00\x00\x00\x16\x03\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x16\x0f\x00\x00\x00\x16\x06\x00\x00\x00\x06\x00\x00\x00\x17\x00\x00\x00\x00\x03\x00\x00\x00\x17\x07\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x02\xec\x9d\x8c\x02\xec\x98\x81\x02\xec\x96\x91\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\xec\x88\x98\x00\x00\x00\x00\x00\x23\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x09\xec\xb5\x9c\xeb\x8c\x80\xea\xb3\xb5\xec\x95\xbd\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x0a\xed\x94\xbc\xeb\xb3\xb4\xeb\x82\x98\xec\xb9\x98\x20\xec\x88\x98\x20\xea\xb5\xac\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x08\xeb\xb6\x80\xed\x98\xb8\xeb\xa5\xbc\x20\xed\x8c\x90\xec\xa0\x95\xed\x95\x98\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x04\xeb\xb3\xb4\xec\x97\xac\xec\xa3\xbc\xeb\x8b\xa4\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x01\x00\x00\x00\x09\x02\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x00\x02\x00\x00\x00\x11\x02\x00\x00\x00\x02\x00\x00\x00\x19\x03\x00\x00\x00\x03\x00\x00\x00\x19\x03\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x00\x03\x00\x00\x00\x19\x04\x00\x00\x00\x01\x00\x00\x00\x19\x04\x00\x00\x00\x01\x00\x00\x00\x19\x01'
)
(internal, code) = parser.parse_code()
(const_table, var_names) = internal

print "\n# Bytecode parsing result: "
print "[const table]"
for constant in const_table:
  dump_constant(constant)
print "[var names]"
for name in var_names:
  print name
print "[code]"
for inst in code:
  print str(inst.line_number) + " " + \
      str(inst.opcode) + " " + str(inst.operand)
